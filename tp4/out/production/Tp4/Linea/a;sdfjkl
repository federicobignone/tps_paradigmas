Enunciado
Se nos pide desarrollar la lógica de juego del '4 en línea'. (https://www.epasatiempos.es/juego-4-en-raya.php)
El espacio de juego se define al iniciar, junto con la variante de triunfo.
La variante de triunfo puede ser,
- 'A' solo 4 en línea verticales u horizontales.
- 'B' solo 4 en línea diagonales
- 'C' 4 en línea en cualquier orientación.
Inician el juego las Rojas y alternan los turnos a partir de ahí
El juego puede terminar por triunfo o por empate. Una vez terminado no se puede seguir colocando fichas

Es requisito cumplir con todos los criterios vistos a lo largo de la cursada.

Se ofrece una pequeña interfaz de línea de comandos para correr por consola:
Debe respetarse el protocolo definido para linea, el constructor y los mensajes playBlueAt, playRedAt, finished y show.

https://github.com/famatodlr/TPs_Paradigmas/blob/main/TP4_4inLine/src/juego/linea.java
https://github.com/Carla1nf/Tps_Paradigmas/blob/main/TP4/linea/src/linea/LineaTest.java
https://github.com/anatissera/TPs_Paradigmas_de_Programacion/tree/main/TP4



package linea;
import java.util.ArrayList;

public class Linea {

    private int altura;
    private int base;
    private VarianteDeTriunfo varianteDeTriunfo;
    private ArrayList<ArrayList<Character>> tablero;
    private Turno turno = new TurnoRojo();
    private int movesMade = 0;
    private int maxMoves;


    public Linea(int base, int altura, char varianteDeTriunfo) {
        this.base = base;
        this.altura = altura;
        this.varianteDeTriunfo = ElejirVariante(varianteDeTriunfo);
        maxMoves = base * altura;


    tablero = new ArrayList<>();
        for (int i = 0; i < altura; i++) {
        ArrayList<Character> row = new ArrayList<>();
        for (int j = 0; j < base; j++) {
            row.add(' ');
        }
        tablero.add(row);
    }
}

    public void playRedkAt(int position) {
        // Check if the game is already finished
        if (finished()) {
            System.out.println("The game is already finished.");
            return;
        }

        // Check if the position is valid
        if (position < 1 || position > base) {
            System.out.println("Invalid position. Position must be between 1 and " + base);
            return;
        }

        // Update the game board with 'X' at the specified position
        int rowIndex = altura - 1;  // Start from the bottom row
        while (rowIndex >= 0 && tablero.get(rowIndex).get(position - 1) != ' ') {
            rowIndex--;  // Move up until an empty space is found
        }

        if (rowIndex >= 0) {
            tablero.get(rowIndex).set(position - 1, 'X');
            movesMade++;
        } else {
            System.out.println("Column is full. Choose another position.");
        }

        // Check if the game should be finished based on some condition
        if (movesMade >= maxMoves) {
            System.out.println("Game finished after " + movesMade + " moves.");
            // You can add additional logic here if needed
        }

    }

    public boolean finished() {
        return movesMade >= maxMoves;
    }



    public void playBlueAt(int position) {
        // Check if the game is already finished
        if (finished()) {
            System.out.println("The game is already finished.");
            return;
        }

        // Check if the position is valid
        if (position < 1 || position > base) {
            System.out.println("Invalid position. Position must be between 1 and " + base);
            return;
        }

        // Update the game board with 'X' at the specified position
        int rowIndex = altura - 1;  // Start from the bottom row
        while (rowIndex >= 0 && tablero.get(rowIndex).get(position - 1) != ' ') {
            rowIndex--;  // Move up until an empty space is found
        }

        if (rowIndex >= 0) {
            tablero.get(rowIndex).set(position - 1, '0');
            movesMade++;
        } else {
            System.out.println("Column is full. Choose another position.");
        }

        // Check if the game should be finished based on some condition
        if (movesMade >= maxMoves) {
            System.out.println("Game finished after " + movesMade + " moves.");
            // You can add additional logic here if needed
        }


    }

    public boolean show() {
        // Print the current state of the game board
        for (ArrayList<Character> row : tablero) {
            for (char cell : row) {
                System.out.print(cell + " ");
            }
            System.out.println();
        }
        System.out.println();
        return false;
    }


    private VarianteDeTriunfo ElejirVariante(char varianteDeTriunfo) {
        return new VarianteDeTriunfo() {
        };
    }




}


